#!/bin/bash

INSTALL_DIR="$HOME/terminal_task_manager"
SCRIPT_PATH="$(realpath "$0")"
TERMINAL_ID_FILE="$INSTALL_DIR/terminal_ids.json"
TASKS_FILE="$INSTALL_DIR/terminal_tasks.json"
HEARTBEAT_FILE="$INSTALL_DIR/terminal_heartbeats.json"
EXECUTING_TERMINAL_FILE="$INSTALL_DIR/executing_terminal_ids.json"
LOG_FILE="$INSTALL_DIR/terminal_manager.log"
MONITOR_INTERVAL=2
HEARTBEAT_INTERVAL=5
TERMINAL_TIMEOUT=10

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
mkdir -p "$INSTALL_DIR"
chmod 777 "$INSTALL_DIR"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
  local MESSAGE="$1"
  printf "%s - %s\n" "$(date +'%Y-%m-%d %H:%M:%S')" "$MESSAGE" | tee -a "$LOG_FILE"
}


# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –≤ —Ä–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥
log "üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"
cp -f "$SCRIPT_PATH" "$INSTALL_DIR/terminal_manager.sh"
chmod +x "$INSTALL_DIR/terminal_manager.sh"


log "–°–æ–∑–¥–∞–Ω –ø—É—Ç—å $INSTALL_DIR"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
initialize_files() {
  [ ! -f "$TERMINAL_ID_FILE" ] && echo "[]" > "$TERMINAL_ID_FILE"
  [ ! -f "$TASKS_FILE" ] && echo "[]" > "$TASKS_FILE"
  [ ! -f "$HEARTBEAT_FILE" ] && echo "[]" > "$HEARTBEAT_FILE"
  [ ! -f "$EXECUTING_TERMINAL_FILE" ] && echo "[]" > "$EXECUTING_TERMINAL_FILE"
  chmod 666 "$TERMINAL_ID_FILE" "$TASKS_FILE" "$HEARTBEAT_FILE" "$EXECUTING_TERMINAL_FILE"

  log "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª TERMINAL_ID_FILE $TERMINAL_ID_FILE"
  log "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª TASKS_FILE $TASKS_FILE"
  log "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª HEARTBEAT_FILE $HEARTBEAT_FILE"
  log "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª EXECUTING_TERMINAL_FILE $EXECUTING_TERMINAL_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
generate_terminal_id() {
  echo $(date +%s%N | sha256sum | head -c 32)
}

register_terminal() {
  local TERMINAL_ID=$1
  local IS_PRIMARY="false"
  local PRIMARY_TERMINAL_ID=$(jq -r '.[0] // empty' "$TERMINAL_ID_FILE")

  if [ -z "$PRIMARY_TERMINAL_ID" ]; then
    IS_PRIMARY="true"
    log "üõ†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–≥–æ: $TERMINAL_ID"
  else
    log "üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: $TERMINAL_ID"
  fi

  add_terminal_id "$TERMINAL_ID_FILE" "$TERMINAL_ID"

  local ROLE_FILE="$INSTALL_DIR/terminal_role_$TERMINAL_ID"
  if [ "$IS_PRIMARY" == "true" ]; then
    echo "primary" > "$ROLE_FILE"
  else
    echo "worker" > "$ROLE_FILE"
  fi
  chmod 666 "$ROLE_FILE"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ñ–∞–π–ª

  log "üì£ –¢–µ—Ä–º–∏–Ω–∞–ª $TERMINAL_ID ($IS_PRIMARY) –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
}

monitor_terminal_status() {
  local TERMINAL_ID=$1
  local ROLE_FILE="$INSTALL_DIR/terminal_role_$TERMINAL_ID"

  if [ ! -f "$ROLE_FILE" ]; then
    log "‚ö†Ô∏è –§–∞–π–ª —Ä–æ–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è $TERMINAL_ID. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞."
    echo "worker" > "$ROLE_FILE"
    chmod 666 "$ROLE_FILE"
  fi

  local ROLE=$(cat "$ROLE_FILE")

  # –ï—Å–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º, –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
  if [ "$ROLE" == "primary" ]; then
    log "üõ†Ô∏è –¢–µ—Ä–º–∏–Ω–∞–ª $TERMINAL_ID —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º, —Å—Ç–∞—Ç—É—Å –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è"
    return
  fi

  log "üîç –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è $TERMINAL_ID"
  while true; do
    log "üíì –û—Ç–ø—Ä–∞–≤–∫–∞ heartbeat –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ $TERMINAL_ID"
    send_heartbeat "$TERMINAL_ID"
    
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    check_tasks &

    sleep $MONITOR_INTERVAL
  done
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ —Ñ–∞–π–ª
add_terminal_id() {
  local FILE_PATH="$1"
  local TERMINAL_ID="$2"

  if [ -f "$FILE_PATH" ]; then
    jq --arg id "$TERMINAL_ID" '. += [$id]' "$FILE_PATH" | sponge "$FILE_PATH"
  else
    echo '[]' | jq --arg id "$TERMINAL_ID" '. += [$id]' > "$FILE_PATH"
  fi
  chmod 666 "$FILE_PATH"
  log "üíæ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä $TERMINAL_ID –¥–æ–±–∞–≤–ª–µ–Ω –≤ $FILE_PATH"
}


# üñ•Ô∏è –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
open_new_terminal() {
  local TERMINAL_ID=$1

  if [ -z "$TERMINAL_ID" ]; then
    TERMINAL_ID=$(generate_terminal_id)
    log "üÜï –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: $TERMINAL_ID"
  else
    log "üì• –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: $TERMINAL_ID"
  fi

  add_terminal_id "$EXECUTING_TERMINAL_FILE" "$TERMINAL_ID"
  log "üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ WSL —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"
  cmd.exe /C start wsl /bin/bash -c "exec $SHELL"

  log "üñ•Ô∏è –û—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª WSL —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º $TERMINAL_ID"
  add_task "$TERMINAL_ID" "ls"
  add_task "$TERMINAL_ID" "nohup bash -c 'cd $INSTALL_DIR && bash terminal_manager.sh monitor-status $TERMINAL_ID' > /dev/null 2>&1 &"


  
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
start_terminal_monitoring() {
  monitor_terminal_status "$TERMINAL_ID"
}


# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏–∑ .bashrc
register_terminal_from_bashrc() {
  log "üîç –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏–∑ .bashrc"
  local TERMINAL_ID

  if [ -f "$EXECUTING_TERMINAL_FILE" ]; then
    local EXISTING_IDS=$(jq -r '.' "$EXECUTING_TERMINAL_FILE")
    log "üìÑ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã: $EXISTING_IDS"
    
    if [ "$EXISTING_IDS" != "[]" ]; then
      TERMINAL_ID=$(jq -r '.[0]' <<< "$EXISTING_IDS")
      jq 'del(.[0])' "$EXECUTING_TERMINAL_FILE" | sponge "$EXECUTING_TERMINAL_FILE"
      log "üóëÔ∏è –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä $TERMINAL_ID —É–¥–∞–ª–µ–Ω –∏–∑ $EXECUTING_TERMINAL_FILE"
    else
      TERMINAL_ID=$(generate_and_save_terminal_id)
    fi
  else
    log "‚ö†Ô∏è –§–∞–π–ª $EXECUTING_TERMINAL_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π"
    echo '[]' > "$EXECUTING_TERMINAL_FILE"
    TERMINAL_ID=$(generate_and_save_terminal_id)
  fi

  add_terminal_id "$TERMINAL_ID_FILE" "$TERMINAL_ID"
  log "üíæ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä $TERMINAL_ID –¥–æ–±–∞–≤–ª–µ–Ω –≤ $TERMINAL_ID_FILE"
  export TERMINAL_ID="$TERMINAL_ID"

  log "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ $TERMINAL_ID"
  check_tasks $TERMINAL_ID

  # start_terminal_monitoring
  log "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ $TERMINAL_ID"

  # echo $TERMINAL_ID
}

# üìù –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
add_task() {
  local TASK_TERMINAL_ID=$1
  local TASK_COMMAND=$2
  local TASK_ID=$(date +%s%N)
  local TASK_STATUS="new"

  jq --arg id "$TASK_ID" --arg terminal_id "$TASK_TERMINAL_ID" --arg status "$TASK_STATUS" --arg command "$TASK_COMMAND" '. += [{"id": $id, "terminal_id": $terminal_id, "status": $status, "command": $command}]' "$TASKS_FILE" | sponge "$TASKS_FILE"
  chmod 666 "$TASKS_FILE"

  log "üìù –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ $TASK_ID –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ $TASK_TERMINAL_ID: $TASK_COMMAND"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ heartbeat
send_heartbeat() {
  local TERMINAL_ID=$1
  local CURRENT_TIME=$(date +%s)

  jq --arg id "$TERMINAL_ID" --arg time "$CURRENT_TIME" 'map(if .id == $id then .time = $time else . end) | if length == 0 then . += [{"id": $id, "time": $time}] else . end' "$HEARTBEAT_FILE" | sponge "$HEARTBEAT_FILE"
  chmod 666 "$HEARTBEAT_FILE"
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤
check_active_terminals() {
  local CURRENT_TIME=$(date +%s)
  
  jq --arg current_time "$CURRENT_TIME" --arg timeout "$TERMINAL_TIMEOUT" 'map(select(($current_time | tonumber) - (.time | tonumber) < ($timeout | tonumber)))' "$HEARTBEAT_FILE" | sponge "$HEARTBEAT_FILE"
  chmod 666 "$HEARTBEAT_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
list_tasks() {
  jq -r '.[] | "\(.id) - \(.terminal_id) - \(.status) - \(.command)"' "$TASKS_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
check_tasks() {
  local TERMINAL_ID_ARG=$1
  local TERMINAL_ID=${TERMINAL_ID_ARG:-$TERMINAL_ID}
  local TASK_ID
  local TASK_TERMINAL_ID
  local TASK_STATUS
  local TASK_COMMAND

  log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ $TERMINAL_ID"

  jq -c '.[]' "$TASKS_FILE" | while read -r task; do
    TASK_ID=$(echo "$task" | jq -r '.id')
    TASK_TERMINAL_ID=$(echo "$task" | jq -r '.terminal_id')
    TASK_STATUS=$(echo "$task" | jq -r '.status')
    TASK_COMMAND=$(echo "$task" | jq -r '.command')

    if [ "$TASK_TERMINAL_ID" == "$TERMINAL_ID" ] && [ "$TASK_STATUS" == "new" ]; then
      log "üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ $TASK_ID –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ $TERMINAL_ID: $TASK_COMMAND"
      update_task_status "$TASK_ID" "in_progress"
      # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
      (
        eval "$TASK_COMMAND"
        if [ $? -eq 0 ]; then
          log "‚úÖ –ó–∞–¥–∞—á–∞ $TASK_ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
          update_task_status "$TASK_ID" "completed"
        else
          log "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ $TASK_ID"
          update_task_status "$TASK_ID" "failed"
        fi
      ) &
    fi
  done
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
update_task_status() {
  local TASK_ID=$1
  local NEW_STATUS=$2

  jq --arg id "$TASK_ID" --arg status "$NEW_STATUS" 'map(if .id == $id then .status = $status else . end)' "$TASKS_FILE" | sponge "$TASKS_FILE"
  chmod 666 "$TASKS_FILE"
  log "üìã –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ $TASK_ID –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ $NEW_STATUS"
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
update_task_status() {
  local TASK_ID=$1
  local NEW_STATUS=$2

  jq --arg id "$TASK_ID" --arg status "$NEW_STATUS" 'map(if .id == $id then .status = $status else . end)' "$TASKS_FILE" | sponge "$TASKS_FILE"
  chmod 666 "$TASKS_FILE"
  log "üìã –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ $TASK_ID –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ $NEW_STATUS"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏ –≤—Å–µ—Ö –µ–≥–æ –∑–∞–¥–∞—á
remove_terminal() {
  local TERMINAL_ID=$1

  # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
  jq --arg id "$TERMINAL_ID" 'map(select(. != $id))' "$TERMINAL_ID_FILE" | sponge "$TERMINAL_ID_FILE"
  chmod 666 "$TERMINAL_ID_FILE"

  # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
  jq --arg id "$TERMINAL_ID" 'map(select(.terminal_id != $id))' "$TASKS_FILE" | sponge "$TASKS_FILE"
  chmod 666 "$TASKS_FILE"

  # –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
  rm -f "$INSTALL_DIR/terminal_role_$TERMINAL_ID"

  log "üóëÔ∏è –¢–µ—Ä–º–∏–Ω–∞–ª $TERMINAL_ID –∏ –µ–≥–æ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
reset_task_statuses() {
  jq 'map(.status = "new")' "$TASKS_FILE" | sponge "$TASKS_FILE"
  chmod 666 "$TASKS_FILE"

  log "üîÑ –°—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å–±—Ä–æ—à–µ–Ω—ã –≤ 'new'"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö heartbeat –∑–∞–ø–∏—Å–µ–π
cleanup_heartbeats() {
  local CURRENT_TIME=$(date +%s)
  local CLEANUP_THRESHOLD=$((CURRENT_TIME - TERMINAL_TIMEOUT))

  jq --arg threshold "$CLEANUP_THRESHOLD" 'map(select(.time | tonumber > ($threshold | tonumber)))' "$HEARTBEAT_FILE" | sponge "$HEARTBEAT_FILE"
  chmod 666 "$HEARTBEAT_FILE"

  log "üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ heartbeat –∑–∞–ø–∏—Å–∏"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å—É
find_tasks_by_status() {
  local STATUS=$1
  jq --arg status "$STATUS" '.[] | select(.status == $status) | "\(.id) - \(.terminal_id) - \(.status) - \(.command)"' "$TASKS_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–∞—Ä–¥—Ä–µ—Å–µ—Ç–∞
hard_reset() {
  rm -f "$TERMINAL_ID_FILE" "$EXECUTING_TERMINAL_FILE" "$TASKS_FILE" "$HEARTBEAT_FILE"
  initialize_files
  log "üîÑ –•–∞—Ä–¥—Ä–µ—Å–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: –≤—Å–µ —Ñ–∞–π–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

command_handler() {
  case "$1" in
    status)
      terminal_status
      ;;
    add-task)
      add_task "$2" "$3"
      ;;
    list-tasks)
      list_tasks
      ;;
    complete-task)
      complete_task "$2"
      ;;
    remove-terminal)
      remove_terminal "$2"
      ;;
    reset-task-statuses)
      reset_task_statuses
      ;;
    cleanup-heartbeats)
      cleanup_heartbeats
      ;;
    find-tasks)
      find_tasks_by_status "$2"
      ;;
    hard-reset)
      hard_reset
      ;;
    open-new-terminal)
      open_new_terminal
      ;;
    register-terminal-from-bashrc)
      register_terminal_from_bashrc
      ;;
    check-tasks)
      check_tasks
      ;;
    monitor-status)
      log "starting for $2"
      monitor_terminal_status "$2"
      ;;
    *)
      echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
      echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
      echo "  status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤"
      echo "  add-task [terminal_id] [command] - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"
      echo "  list-tasks - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"
      echo "  complete-task [task_id] - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"
      echo "  remove-terminal [terminal_id] - –£–¥–∞–ª–∏—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª –∏ –µ–≥–æ –∑–∞–¥–∞—á–∏"
      echo "  reset-task-statuses - –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á"
      echo "  cleanup-heartbeats - –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ heartbeat –∑–∞–ø–∏—Å–∏"
      echo "  find-tasks [status] - –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É"
      echo "  hard-reset - –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ö–∞—Ä–¥—Ä–µ—Å–µ—Ç"
      echo "  open-new-terminal - –û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª"
      echo "  register-terminal-from-bashrc - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏–∑ .bashrc"
      echo "  monitor-status [terminal_id] - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"
      ;;
  esac
}


setup_bashrc() {
  local BASHRC_FILE="$HOME/.bashrc"
  if ! grep -q "terminal_task_manager" "$BASHRC_FILE"; then
    echo '
# Terminal Task Manager
if [ -f "$HOME/terminal_task_manager/terminal_ids.json" ]; then
  TERMINAL_ID=$(bash $HOME/terminal_task_manager/terminal_manager.sh register-terminal-from-bashrc)
  export TERMINAL_ID
  echo "Terminal ID set to $TERMINAL_ID" | tee -a $HOME/terminal_task_manager/terminal_manager.log
  bash $HOME/terminal_task_manager/terminal_manager.sh check-tasks $TERMINAL_ID # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á
fi
' >> "$BASHRC_FILE"
    log "üìù –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ .bashrc"
  fi
}


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
main() {
  log "üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
  
  initialize_files
  log "üóÉÔ∏è –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"

  setup_bashrc
  log "üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ .bashrc –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

  TERMINAL_ID=$(generate_terminal_id)
  log "üÜî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: $TERMINAL_ID"
  
  register_terminal "$TERMINAL_ID"
  
  log "üîß –¢–µ—Ä–º–∏–Ω–∞–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º: $TERMINAL_ID"

  monitor_terminal_status $TERMINAL_ID
}

if [[ $# -gt 0 ]]; then
  if [[ $1 == "register-terminal-from-bashrc" ]]; then
    register_terminal_from_bashrc
  elif [[ $1 == "get-task" ]]; then
    get_task "$2"
  else
    command_handler "$@"
    echo "üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: $@"

  fi
else
  log "üèÅ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"
  main
fi