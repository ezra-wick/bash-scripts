import uuid
import os
from django.db import models
from django.contrib.auth.models import User
from django.utils.translation import gettext_lazy as _
from django.db.models.signals import post_save, m2m_changed
from django.dispatch import receiver
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
from bashpanel.logger_init import logger
import subprocess

class Terminal(models.Model):
    name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞")
    identifier = models.CharField(max_length=100, unique=True, verbose_name="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä")
    connected = models.BooleanField(default=False, verbose_name="–ü–æ–¥–∫–ª—é—á–µ–Ω")
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", related_name='terminals', null=True, blank=True)
    created = models.DateTimeField(auto_now_add=True, verbose_name=_('üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'))
    updated = models.DateTimeField(auto_now=True, verbose_name=_('üîÑ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'))

    class Meta:
        verbose_name = "–¢–µ—Ä–º–∏–Ω–∞–ª"
        verbose_name_plural = "–¢–µ—Ä–º–∏–Ω–∞–ª—ã"

    def __str__(self):
        return f"{self.name}({self.id})"

    def save(self, *args, **kwargs):
        if not self.identifier:
            self.identifier = str(uuid.uuid4())
            self.name = f"–¢–µ—Ä–º–∏–Ω–∞–ª({self.identifier}) –æ—Ç {self.created}"
        super(Terminal, self).save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        if self.connected:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª
            logger.warning(f"Sending exit command to Terminal {self.identifier} before deletion.")
            channel_layer = get_channel_layer()
            async_to_sync(channel_layer.group_send)(
                self.identifier,
                {
                    'type': 'send_command',
                    'command': 'exit',
                    'task_id': None
                }
            )
            logger.warning(f"Sent exit command to Terminal {self.identifier}")
        super(Terminal, self).delete(*args, **kwargs)


class Command(models.Model):
    command = models.CharField(max_length=255, verbose_name="–ö–æ–º–∞–Ω–¥–∞")
    description = models.TextField(blank=True, null=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    parent = models.ForeignKey('self', on_delete=models.CASCADE, blank=True, null=True, related_name='subcommands', verbose_name="–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞")
    created = models.DateTimeField(auto_now_add=True, verbose_name=_('üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'))
    updated = models.DateTimeField(auto_now=True, verbose_name=_('üîÑ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'))

    class Meta:
        verbose_name = "–ö–æ–º–∞–Ω–¥–∞"
        verbose_name_plural = "–ö–æ–º–∞–Ω–¥—ã"

    def __str__(self):
        return self.command


class CommandSet(models.Model):
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥")
    commands = models.ManyToManyField(Command, through='CommandSetOrder', verbose_name="–ö–æ–º–∞–Ω–¥—ã", related_name='command_sets')
    main_commandset = models.BooleanField(default=False, verbose_name="–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥")
    created = models.DateTimeField(auto_now_add=True, verbose_name=_('üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'))
    updated = models.DateTimeField(auto_now=True, verbose_name=_('üîÑ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'))

    class Meta:
        verbose_name = "–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥"
        verbose_name_plural = "–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥"

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        if self.main_commandset:
            CommandSet.objects.filter(space=self.space).update(main_commandset=False)
        super(CommandSet, self).save(*args, **kwargs)


class CommandSetOrder(models.Model):
    command_set = models.ForeignKey(CommandSet, on_delete=models.CASCADE)
    command = models.ForeignKey(Command, on_delete=models.CASCADE)
    order = models.PositiveIntegerField()
    created = models.DateTimeField(auto_now_add=True, verbose_name=_('üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'))
    updated = models.DateTimeField(auto_now=True, verbose_name=_('üîÑ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'))

    class Meta:
        ordering = ['order']


class Space(models.Model):
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞")
    path = models.CharField(max_length=255, verbose_name="–ü—É—Ç—å –∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É")
    command_sets = models.ManyToManyField(CommandSet, verbose_name="–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥", related_name='spaces')
    main_folder = models.OneToOneField('Folder', on_delete=models.SET_NULL, null=True, blank=True, related_name='main_in_space', verbose_name="–ì–ª–∞–≤–Ω–∞—è –ø–∞–ø–∫–∞")
    created = models.DateTimeField(auto_now_add=True, verbose_name=_('üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'))
    updated = models.DateTimeField(auto_now=True, verbose_name=_('üîÑ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'))

    class Meta:
        verbose_name = "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ"
        verbose_name_plural = "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"

    def __str__(self):
        return self.name

    def update_folders(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ"""
        existing_folders = set(self.folders.values_list('name', flat=True))
        actual_folders = set(os.listdir(self.path))
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç
        Folder.objects.filter(space=self, name__in=(existing_folders - actual_folders)).delete()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–∞–ø–æ–∫
        new_folders = actual_folders - existing_folders
        Folder.objects.bulk_create([Folder(name=folder, space=self) for folder in new_folders])


class Folder(models.Model):
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏")
    space = models.ForeignKey(Space, on_delete=models.CASCADE, verbose_name="–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", related_name='folders')
    command_sets = models.ManyToManyField(CommandSet, verbose_name="–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥", related_name='folders')
    main_commandset = models.OneToOneField(CommandSet, on_delete=models.SET_NULL, null=True, blank=True, related_name='main_in_folder', verbose_name="–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥")
    main_folder = models.BooleanField(default=False, verbose_name="–ì–ª–∞–≤–Ω–∞—è –ø–∞–ø–∫–∞")
    created = models.DateTimeField(auto_now_add=True, verbose_name=_('üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'))
    updated = models.DateTimeField(auto_now=True, verbose_name=_('üîÑ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'))

    class Meta:
        verbose_name = "–ü–∞–ø–∫–∞"
        verbose_name_plural = "–ü–∞–ø–∫–∏"

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        if self.main_folder:
            Folder.objects.filter(space=self.space).update(main_folder=False)
        super(Folder, self).save(*args, **kwargs)


class Task(models.Model):
    terminal = models.ForeignKey(Terminal, on_delete=models.CASCADE, verbose_name="–¢–µ—Ä–º–∏–Ω–∞–ª", related_name='tasks')
    commands = models.ManyToManyField(Command, verbose_name="–ö–æ–º–∞–Ω–¥—ã", related_name='tasks', blank=True)
    status = models.CharField(max_length=50, choices=[('pending', '–í –æ–∂–∏–¥–∞–Ω–∏–∏'), ('running', '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'), ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'), ('failed', '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')], default='pending', verbose_name="–°—Ç–∞—Ç—É—Å")
    output = models.TextField(blank=True, null=True, verbose_name="–í—ã–≤–æ–¥")
    created = models.DateTimeField(auto_now_add=True, verbose_name=_('üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'))
    updated = models.DateTimeField(auto_now=True, verbose_name=_('üîÑ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'))

    class Meta:
        verbose_name = "–ó–∞–¥–∞—á–∞"
        verbose_name_plural = "–ó–∞–¥–∞—á–∏"

    def __str__(self):
        return f"Task {self.id} for {self.terminal}"


@receiver(post_save, sender=Space)
def update_folders_on_space_creation(sender, instance, created, **kwargs):
    if created:
        instance.update_folders()


@receiver(m2m_changed, sender=Task.commands.through)
def send_task_to_terminal(sender, instance, action, **kwargs):
    if action == "post_add":
        logger.warning(f"New Task {instance.id} updated with commands for Terminal {instance.terminal.identifier}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–∞—á–µ–π
        commands = instance.commands.all()
        if not commands:
            logger.warning(f"No commands found for Task {instance.id}")

        commands_list = [command.command for command in commands]
        for command in commands_list:
            logger.warning(f"Command for Task {instance.id}: {command}")

        command_str = ' && '.join(commands_list)
        if command_str:
            logger.warning(f"Command string for Task {instance.id}: {command_str}")
        else:
            logger.warning(f"Command string is empty for Task {instance.id}")

        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            instance.terminal.identifier,
            {
                'type': 'send_command',
                'command': command_str,
                'task_id': instance.id
            }
        )
        logger.warning(f"Sent command for Task {instance.id} to Terminal {instance.terminal.identifier}")


@receiver(post_save, sender=Task)
def send_output_update(sender, instance, **kwargs):
    if instance.output:
        logger.warning(f"Task {instance.id} output updated: {instance.output}")

        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            instance.terminal.identifier,
            {
                'type': 'send_command',
                'command': instance.output,
                'task_id': instance.id
            }
        )
        logger.warning(f"Sent output for Task {instance.id} to Terminal {instance.terminal.identifier}")

class EnvironmentVariable(models.Model):
    key = models.CharField(max_length=255, verbose_name="–ö–ª—é—á –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")
    value = models.CharField(max_length=255, verbose_name="–ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")
    created = models.DateTimeField(auto_now_add=True, verbose_name=_('üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'))
    updated = models.DateTimeField(auto_now=True, verbose_name=_('üîÑ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'))

    class Meta:
        verbose_name = "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        verbose_name_plural = "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"

    def __str__(self):
        return self.key


class Scenario(models.Model):
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è")
    global_environment_variables = models.ManyToManyField(EnvironmentVariable, verbose_name="–û–±—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", related_name='scenarios_global')
    command_sets = models.ManyToManyField(CommandSet, through='ScenarioCommandSetOrder', verbose_name="–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥", related_name='scenarios')
    output = models.TextField(blank=True, null=True, verbose_name="–í—ã–≤–æ–¥")
    created = models.DateTimeField(auto_now_add=True, verbose_name='üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    updated = models.DateTimeField(auto_now=True, verbose_name='üîÑ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')

    class Meta:
        verbose_name = "–°—Ü–µ–Ω–∞—Ä–∏–π"
        verbose_name_plural = "–°—Ü–µ–Ω–∞—Ä–∏–∏"

    def __str__(self):
        return f"–°—Ü–µ–Ω–∞—Ä–∏–π {self.name} ({self.id})"

class ScenarioCommandSetOrder(models.Model):
    scenario = models.ForeignKey(Scenario, on_delete=models.CASCADE)
    command_set = models.ForeignKey(CommandSet, on_delete=models.CASCADE)
    order = models.PositiveIntegerField()
    created = models.DateTimeField(auto_now_add=True, verbose_name='üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    updated = models.DateTimeField(auto_now=True, verbose_name='üîÑ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')

    class Meta:
        ordering = ['order']

@receiver(post_save, sender=Scenario)
def send_scenario_to_terminal(sender, instance, created, **kwargs):
    if created:
        environment_variables = instance.environment_variables.all()
        env_vars_str = ' '.join([f'{var.key}={var.value}' for var in environment_variables])

        command_set_orders = ScenarioCommandSetOrder.objects.filter(scenario=instance).order_by('order')
        
        for order in command_set_orders:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ CommandSet
            result = subprocess.run(['cmd.exe', '/C', 'start', 'wsl', '/bin/bash', '-c', 'exec $SHELL'], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            terminal = Terminal.objects.create(name='New Terminal', connected=True)

            commands = order.command_set.commands.all()
            commands_list = [command.command for command in commands]
            command_str = ' && '.join(commands_list)
            full_command = f'{env_vars_str} && {command_str}'

            task = Task.objects.create(
                terminal=terminal,
                status='pending',
                output='',
            )

            channel_layer = get_channel_layer()
            async_to_sync(channel_layer.group_send)(
                terminal.identifier,
                {
                    'type': 'send_command',
                    'command': full_command,
                    'task_id': task.id
                }
            )