#!/bin/bash

# –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É —Å–∫—Ä–∏–ø—Ç—É
SCRIPT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPT_NAME="$(basename "${BASH_SOURCE[0]}")"
TARGET_DIR="$HOME/.bash-scripts"
TARGET_PATH="$TARGET_DIR/$SCRIPT_NAME"
BASHRC_PATH="$HOME/.bashrc"
LOG_FILE="$HOME/script.log"
CONFIG_FILE="$TARGET_DIR/config.json"
COMMANDS_DB="$TARGET_DIR/commands_db.sh"
PATHS_FILE="$HOME/paths.json"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ –≤ home, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
mkdir -p "$TARGET_DIR"
sudo apt install jq
# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –≤ TARGET_DIR
cp "$SCRIPT_PATH" "$TARGET_PATH"

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ paths.json, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if [ ! -f "$PATHS_FILE" ]; then
    echo "{}" > "$PATHS_FILE"
    echo "–§–∞–π–ª paths.json —Å–æ–∑–¥–∞–Ω."
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    local message="$1"
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $message" >> "$LOG_FILE"
}

log "–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ .bashrc, –µ—Å–ª–∏ –µ–µ —Ç–∞–º –Ω–µ—Ç
add_to_bashrc() {
    local line="$1"
    if ! grep -qF "$line" "$BASHRC_PATH"; then
        echo "$line" >> "$BASHRC_PATH"
        log "–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –≤ .bashrc: $line"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ .bashrc
add_to_bashrc "if [ -f \"$TARGET_PATH\" ]; then . \"$TARGET_PATH\"; fi"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        USERNAME=$(grep '"username"' "$CONFIG_FILE" | cut -d '"' -f 4)
        REPOSITORY=$(grep '"repository"' "$CONFIG_FILE" | cut -d '"' -f 4)
        log "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: USERNAME=$USERNAME, REPOSITORY=$REPOSITORY"
    else
        log "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        USERNAME=""
        REPOSITORY=""
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
save_config() {
    cat <<EOF > "$CONFIG_FILE"
{
    "username": "$USERNAME",
    "repository": "$REPOSITORY"
}
EOF
    log "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: USERNAME=$USERNAME, REPOSITORY=$REPOSITORY"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
set_username() {
    USERNAME="$1"
    save_config
    echo -e "${GREEN}–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $USERNAME${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–º–µ–Ω–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
set_repository() {
    REPOSITORY="$1"
    save_config
    echo -e "${GREEN}–ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $REPOSITORY${NC}"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_config

# –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–∏–∞—Å–æ–≤ –∏ –∫–æ–º–∞–Ω–¥
declare -A commands
echo "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: $COMMANDS_DB"

# –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[1;36m'
RED='\033[0;31m'
GRAY='\033[1;30m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
load_commands() {
    if [ -f "$COMMANDS_DB" ]; then
        source "$COMMANDS_DB"
        log "–ö–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ $COMMANDS_DB"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
save_commands() {
    echo "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ —Ñ–∞–π–ª $COMMANDS_DB..."
    {
        for key in "${!commands[@]}"; do
            echo "commands[$key]='${commands[$key]}'"
        done
    } > "$COMMANDS_DB"
    log "–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $COMMANDS_DB"
    echo "‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $COMMANDS_DB"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª–∏–∞—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
add_alias_if_not_exists() {
    local alias_name="$1"
    local alias_command="$2"
    if ! grep -qF "alias $alias_name" "$BASHRC_PATH"; then
        echo "alias $alias_name='$alias_command'" >> "$BASHRC_PATH"
        echo -e "${GREEN}üîó –ê–ª–∏–∞—Å '$alias_name' –¥–æ–±–∞–≤–ª–µ–Ω.${NC}"
        log "–ê–ª–∏–∞—Å '$alias_name' –¥–æ–±–∞–≤–ª–µ–Ω"
    else
        echo -e "${CYAN}‚è© –ê–ª–∏–∞—Å '$alias_name' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.${NC}"
        log "–ê–ª–∏–∞—Å '$alias_name' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–ª–∏–∞—Å–æ–≤
add_alias_if_not_exists "prp" "poetry run python"
add_alias_if_not_exists "run" "DEBUG=True poetry run python manage.py runserver"
add_alias_if_not_exists "mm" "poetry run python manage.py makemigrations && poetry run python manage.py migrate"
add_alias_if_not_exists "migrate" "poetry run python manage.py migrate"
add_alias_if_not_exists "work" "cd /mnt/c/work/gallery360"
add_alias_if_not_exists "shop" "cd /mnt/c/code/shop/"
add_alias_if_not_exists "phasotech" "cd /mnt/c/code/phasotech/"
add_alias_if_not_exists "crearama" "cd /mnt/c/code/crearama/"
add_alias_if_not_exists "push" "./test_server.sh"
add_alias_if_not_exists "archive" "poetry run python archivator.py"
add_alias_if_not_exists "openwork" "explorer.exe C:\\work\\gallery360"
add_alias_if_not_exists "csu" "poetry run python manage.py createsuperuser"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PATH
if ! grep -qF 'export PATH="/usr/local/bin:$PATH"' "$BASHRC_PATH"; then
    echo 'export PATH="/usr/local/bin:$PATH"' >> "$BASHRC_PATH"
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–ª–∏–∞—Å–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
register_command_in_current_session() {
    local key="$1"
    local command="${commands[$key]}"
    alias "$key"="$command"
    log "–ö–æ–º–∞–Ω–¥–∞ '$key' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
add_command() {
    local key="$1"
    local command="$2"
    commands["$key"]="$command"
    save_commands
    register_command_in_current_session "$key"
    echo -e "${GREEN}‚úÖ –ö–æ–º–∞–Ω–¥–∞ '$key' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!${NC}"
    log "–ö–æ–º–∞–Ω–¥–∞ '$key' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π '$command'"
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
edit_command() {
    local key="$1"
    local command="$2"
    if [ "${commands["$key"]+isset}" ]; then
        commands["$key"]="$command"
        echo -e "${GREEN}‚úèÔ∏è –ö–æ–º–∞–Ω–¥–∞ '$key' —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞!${NC}"
        save_commands
        register_command_in_bashrc "$key"
        log "–ö–æ–º–∞–Ω–¥–∞ '$key' –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞"
    else
        echo -e "${RED}‚ùå –ö–æ–º–∞–Ω–¥–∞ —Å –∫–ª—é—á–æ–º '$key' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.${NC}"
        log "–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã '$key'"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
delete_command() {
    local key="$1"
    unset commands["$key"]
    echo -e "${GREEN}üóëÔ∏è –ö–æ–º–∞–Ω–¥–∞ '$key' —É–¥–∞–ª–µ–Ω–∞.${NC}"
    save_commands
    log "–ö–æ–º–∞–Ω–¥–∞ '$key' —É–¥–∞–ª–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
execute_command() {
    local key="$1"
    if [ "${commands["$key"]+isset}" ]; then
        eval "${commands["$key"]}"
        log "–ö–æ–º–∞–Ω–¥–∞ '$key' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${commands["$key"]}"
    else
        echo -e "${RED}‚ùå –ö–æ–º–∞–Ω–¥–∞ —Å –∫–ª—é—á–æ–º '$key' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.${NC}"
        log "–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã '$key'"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
list_commands() {
    echo -e "${CYAN}üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
    local max_key_length=0
    for key in "${!commands[@]}"; do
        if [[ ${#key} -gt $max_key_length ]]; then
            max_key_length=${#key}
        fi
    done

    for key in "${!commands[@]}"; do
        printf "${YELLOW}üîë %-*s${NC} %s\n" $max_key_length "$key" "${commands[$key]}"
    done
    log "–ü–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª–∏–∞—Å–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ .bashrc
register_command_in_bashrc() {
    local key="$1"
    if ! grep -qF "alias $key='execute_command $key'" "$BASHRC_PATH"; then
        echo "alias $key='execute_command $key'" >> "$BASHRC_PATH"
        echo -e "${GREEN}üîó –ö–æ–º–∞–Ω–¥–∞ '$key' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ .bashrc.${NC}"
        log "–ö–æ–º–∞–Ω–¥–∞ '$key' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ .bashrc"
    fi
}

load_and_register_commands() {
    load_commands
    for key in "${!commands[@]}"; do
        register_command_in_current_session "$key"
    done
}

load_and_register_commands

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç—è–º–∏
addpath() {
    key=$1
    current_path=$(pwd)
    paths_file="$HOME/paths.json"

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ paths.json, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if [ ! -f "$paths_file" ]; then
        echo "{}" > "$paths_file"
    fi

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—É—Ç–∏ –≤ paths.json
    jq --arg key "$key" --arg path "$current_path" '. + {($key): $path}' "$paths_file" > "$paths_file.tmp" && mv "$paths_file.tmp" "$paths_file"

    echo -e "${GREEN}‚ûï –ü—É—Ç—å –¥–ª—è –∫–ª—é—á–∞ '$key' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!${NC}"
    log "–ü—É—Ç—å –¥–ª—è –∫–ª—é—á–∞ '$key' –¥–æ–±–∞–≤–ª–µ–Ω: $current_path"
}

goto() {
    key=$1
    paths_file="$HOME/paths.json"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ paths.json
    if [ ! -f "$paths_file" ]; then
        echo -e "${RED}‚ùå –§–∞–π–ª paths.json –Ω–µ –Ω–∞–π–¥–µ–Ω.${NC}"
        log "–§–∞–π–ª paths.json –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"
        return 1
    fi

    path=$(jq -r --arg key "$key" '.[$key] // empty' "$paths_file")

    if [[ $path != "" ]]; then
        cd "$path"
        echo -e "${CYAN}üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω –≤: $path${NC}"
        log "–ü–µ—Ä–µ–º–µ—â–µ–Ω –≤: $path"
    else
        echo -e "${RED}‚ùå –ö–ª—é—á '$key' –Ω–µ –Ω–∞–π–¥–µ–Ω.${NC}"
        log "–ö–ª—é—á '$key' –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"
    fi
}

listpaths() {
    paths_file="$HOME/paths.json"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ paths.json
    if [ ! -f "$paths_file" ]; then
        echo -e "${RED}‚ùå –§–∞–π–ª paths.json –Ω–µ –Ω–∞–π–¥–µ–Ω.${NC}"
        log "–§–∞–π–ª paths.json –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Ç–µ–π"
        return 1
    fi

    echo -e "${CYAN}üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π:${NC}"
    jq -r 'to_entries[] | "\(.key): \(.value)"' "$paths_file"
    log "–ü–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π"
}

removepath() {
    key=$1
    paths_file="$HOME/paths.json"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ paths.json
    if [ ! -f "$paths_file" ]; then
        echo -e "${RED}‚ùå –§–∞–π–ª paths.json –Ω–µ –Ω–∞–π–¥–µ–Ω.${NC}"
        log "–§–∞–π–ª paths.json –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Ç–∏"
        return 1
    fi

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –∏–∑ paths.json
    jq --arg key "$key" 'del(.[$key])' "$paths_file" > "$paths_file.tmp" && mv "$paths_file.tmp" "$paths_file"

    echo -e "${GREEN}üóëÔ∏è –ü—É—Ç—å –¥–ª—è –∫–ª—é—á–∞ '$key' —É–¥–∞–ª–µ–Ω.${NC}"
    log "–ü—É—Ç—å –¥–ª—è –∫–ª—é—á–∞ '$key' —É–¥–∞–ª–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
combine_commands() {
    local new_key="$1"
    shift
    local combined_command=""
    for key in "$@"; do
        if [ "${commands["$key"]+isset}" ]; then
            combined_command+="${commands["$key"]} && "
        else
            echo -e "${RED}‚ùå –ö–æ–º–∞–Ω–¥–∞ —Å –∫–ª—é—á–æ–º '$key' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.${NC}"
            log "–ü–æ–ø—ã—Ç–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π '$key'"
            return 1
        fi
    done
    combined_command="${combined_command::-4}" # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ' && '
    add_command "$new_key" "$combined_command"
    log "–°–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '$new_key' –∏–∑ –∫–æ–º–∞–Ω–¥: $@"
}


# üÜò –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
show_help() {
    echo -e "\n${CYAN}‚ÑπÔ∏è  –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏:${NC}\n"
    sleep 0.5
    echo -e "${YELLOW}‚ûï add_command <–∫–ª—é—á> <–∫–æ–º–∞–Ω–¥–∞>${NC}      - –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"
    echo -e "${GRAY}   –ü—Ä–∏–º–µ—Ä: add_command start 'python3 app.py'${NC}"
    sleep 0.3
    echo -e "\n${YELLOW}‚úèÔ∏è edit_command <–∫–ª—é—á> <–∫–æ–º–∞–Ω–¥–∞>${NC}     - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É"
    echo -e "${GRAY}   –ü—Ä–∏–º–µ—Ä: edit_command start 'python3 server.py'${NC}"
    sleep 0.3
    echo -e "\n${YELLOW}üóëÔ∏è delete_command <–∫–ª—é—á>${NC}              - –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"
    echo -e "${GRAY}   –ü—Ä–∏–º–µ—Ä: delete_command start${NC}"
    sleep 0.3
    echo -e "\n${YELLOW}‚ñ∂Ô∏è execute_command <–∫–ª—é—á>${NC}             - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"
    echo -e "${GRAY}   –ü—Ä–∏–º–µ—Ä: execute_command start${NC}"
    sleep 0.3
    echo -e "\n${YELLOW}üîç list_commands${NC}                       - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"
    sleep 0.3
    echo -e "\n${YELLOW}‚ûï addpath <–∫–ª—é—á>${NC}                      - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –ø–æ –∫–ª—é—á—É"
    echo -e "${GRAY}   –ü—Ä–∏–º–µ—Ä: addpath project${NC}"
    sleep 0.3
    echo -e "\n${YELLOW}‚ñ∂Ô∏è goto <–∫–ª—é—á>${NC}                        - –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—É—Ç–∏ –ø–æ –∫–ª—é—á—É"
    echo -e "${GRAY}   –ü—Ä–∏–º–µ—Ä: goto project${NC}"
    sleep 0.3
    echo -e "\n${YELLOW}üîç listpaths${NC}                         - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—É—Ç–∏"
    sleep 0.3
    echo -e "\n${YELLOW}üóëÔ∏è removepath <–∫–ª—é—á>${NC}                   - –£–¥–∞–ª–∏—Ç—å –ø—É—Ç—å –ø–æ –∫–ª—é—á—É"
    echo -e "${GRAY}   –ü—Ä–∏–º–µ—Ä: removepath project${NC}"
    sleep 0.3
    echo -e "\n${YELLOW}üîó combine_commands <–Ω–æ–≤—ã–π_–∫–ª—é—á> <–∫–ª—é—á1> <–∫–ª—é—á2> ...${NC} - –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥"
    echo -e "${GRAY}   –ü—Ä–∏–º–µ—Ä: combine_commands all start stop${NC}"
    sleep 0.3
    echo -e "\n${YELLOW}üìñ show_help${NC}                         - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    log "–ü–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏"
}


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
case "$1" in
    add_command)
        shift
        add_command "$@"
        ;;
    edit_command)
        shift
        edit_command "$@"
        ;;
    delete_command)
        shift
        delete_command "$1"
        ;;
    execute_command)
        shift
        execute_command "$1"
        ;;
    list_commands)
        list_commands
        ;;
    addpath)
        shift
        addpath "$1"
        ;;
    goto)
        shift
        goto "$1"
        ;;
    listpaths)
        listpaths
        ;;
    removepath)
        shift
        removepath "$1"
        ;;
    combine_commands)
        shift
        combine_commands "$@"
        ;;
    set_username)
        shift
        set_username "$1"
        ;;
    set_repository)
        shift
        set_repository "$1"
        ;;
    help|*)
        show_help
        ;;
esac

